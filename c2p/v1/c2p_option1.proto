syntax = "proto3";

package c2p.v1;

// Overall Approach: C2P is the client and must initiates communicate with the policy providers

// PVP provider-level configuration
message PolicyProviderConfig {}


message ConfigureProviderRequest {}
message ConfigureProviderResponse {}

// Rule Exchange

// Define a single rule parameter
message Parameter {
  // name is the human-readable parameter identifier
  string name = 1;
  // description is the human-readable documentation for the parameter
  string description = 2;
}

// Define a single rule
message Rule {
  // name is the human-readable technical rule identifier
  string name = 1;
  // description is the human-readable documentation for the technical rule
  string description = 2;
  repeated Parameter parameters = 3;
}

// Lifecycle
message GetRulesRequest {}
message GetRulesResponse {}


// Policy Generation

// Create a rule evaluation plan the user can review
// This could generated any policy or complete pre-steps
message PlanRuleEvaluationRequest {}
message PlanRuleEvaluationResponse {}

// Rule Evaluation

// Evaluation Outcome
enum Outcome {
  OUTCOME_UNSPECIFIED = 0;
  OUTCOME_SUCCESS = 1;
  OUTCOME_FAILURE = 2;
}

// Evaluation Severity
enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_ERROR = 1;
  SEVERITY_WARNING = 2;
}

// Evaluate the policy
message EvaluateRuleRequest {}
message EvaluateRuleResponse {
    string rule_id = 1;
    Outcome outcome = 2;
    string description = 3;
    Severity severity = 4;
    string instructions = 5;
  }


service PolicyProviderService {
  // GetRules returns information about supported rules so
  // the client can information the user what a valid configuration would
  // look like.
  rpc GetRules(GetRulesRequest) returns (GetRulesResponse);

  // Initialization of PVP provider
  rpc ConfigureProvider(ConfigureProviderRequest) returns (ConfigureProviderResponse);

  // Lifecycle
  rpc PlanRuleEvaluation(PlanRuleEvaluationRequest) returns (PlanRuleEvaluationResponse);
  rpc EvaluateRule(EvaluateRuleRequest) returns (EvaluateRuleResponse);

  // TODO(jpower432): What does shutting down the plugin server look like?
}
